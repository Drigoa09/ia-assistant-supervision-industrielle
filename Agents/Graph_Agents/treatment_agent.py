from OrderState import OrderState
from model import model_codestral, model_mistral_medium

from Tools_nodes.treatment_tools.traitement_format import Traitement_Format, fonction

structured_llm = model_codestral.with_structured_output(fonction)

EXEMPLES = f'''
Exemple 1 :
Exprimer les programmes en fonction de leur cycle associ√©

[fonction(fonction_appelee=<fonctions_existantes.INFORMATION_EN_FONCTION_AUTRE: 'information_en_fonction_autre'>, args=['avant', DataFrame contenant les cycles, DataFrame contenant les programmes)]

Exemple 2 :
Afficher les informations sur un graphique

[fonction(fonction_appelee=<fonctions_existantes.CREER_GRAPHIQUE: 'creer_graphique'>, args=[DataFrames contenant les graphiques que nous voulons afficher]]

Exemple 3 :
Filtrer les programmes en acceptant que ceux contenant l'outil 130

Lorsque FILTRER_VALEUR est utilis√©, le premier √©l√©ment de DataFrame doit toujours √™tre associ√© √† <strong id = "1">des temps de cycle</strong> ou  <strong id = "1">des temps de coupe </strong> et il doit contenir les attributs start et end

[fonction(fonction_appelee=<fonctions_existantes.FILTRER_VALEUR: 'filtrer_valeur'>, args=['130', Element(numero_dataFrame=num√©ro correspondant aux outils et <strong id = "1">leur temps de coupe</strong>, cle_dataFrame=cl√© correspondant aux outils), Element(numero_dataFrame=num√©ro correspondant aux programmes, cle_dataFrame=cl√© correspondant aux programmes)])]

Exemple 4 :
Filtrer les outils ayant d√©pass√© deux heures de coupe cumul√©es

N'oublie pas que les num√©ros de dataFrame et leur cl√© doit exister

[fonction(fonction_appelee=<fonctions_existantes.FILTRER_COMPARAISON: 'filtrer_comparaison'>, args=[Element(numero_dataFrame=num√©ro correspondant au temps, cle_dataFrame=cl√© correspondant au temps), '7200', '+inf']

Exemple 5:
Extraire les 3 premi√®res alarmes

[fonction(fonction_appelee=<fonctions_existantes.N_PREMIERS: 'filtrer_comparaison'>, args=[Element(numero_dataFrame=num√©ro correspondant aux alarmes, cle_dataFrame=cl√© correspondant aux alarmes), '3']

'''

def treatment_agent(state: OrderState) -> OrderState:
    """Agent de traitement"""

    if state['traitement'] != None:
        AGENT_GENERATION_SYSINT = f'''
        Tu es un agent interpr√®te sp√©cialis√© dans l‚Äôindustrie.

        Tu essaies de r√©pondre aux questions avec les outils qui te sont donn√©s, pas √† pas.

        Les programmes sont choisis avant le lancement des cycles.
        Les outils sont choisis avant le lancement des coupes
        Les alarmes se produisent durant l'ex√©cution d'un programme avec son cycle associ√©

        Lorsque des variables sont choisies avant la d√©finition d'une variable, il faut choisir l'option 'avant' comme argument de INFORMATION_EN_FONCTION_AUTRE

        Tu as acc√®s aux cl√©s de dataFrame : \n

        timestamp signifie le temps o√π la donn√©e a √©t√© prise
        timestamp n'existe pas forc√©ment.
        D'autres variables peuvent repr√©senter le temps

        '''
        n = len(state['dataFrames'])
        
        for i in range(n):
            AGENT_GENERATION_SYSINT +=  f"Emplacement : {i} et colonnes : {state['dataFrames'][i].dataFrame.columns}" + " : " + state['dataFrames'][i].role + "\n"

        AGENT_GENERATION_SYSINT += '''Tu ne peux utiliser que ces cl√©s de dataFrame. Il n'est pas possible d'en utiliser des variantes'''

        AGENT_GENERATION_SYSINT += EXEMPLES

        print("Prompt donn√© : \n")
        print(AGENT_GENERATION_SYSINT)

    traitement_actuel = state.get("traitement", "")
    prompt = f"{AGENT_GENERATION_SYSINT}\n{traitement_actuel}"

    # Appelle le mod√®le avec prompt fusionn√©
    traitement_format_result = structured_llm.invoke(prompt)

    #print("üß™ R√©sultat traitement_format:", traitement_format_result)

    # Tu cr√©es un NOUVEAU dict propre ici
    updated_state = {
        **state,
        "traitement_format": traitement_format_result
    }

    #print("üì§ Ce que je retourne dans treatment_agent:", list(updated_state.keys()))

    return updated_state